name: Deploy to Maven Central

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        default: '0.0.1'
        description: 'Version to deploy'
        required: true
        type: string

env:
  MAVEN_OPTS: "-Xmx2g -XX:ReservedCodeCacheSize=1g -XX:+UseG1GC -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN"

jobs:
  deploy:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --import
          echo "${{ secrets.GPG_SECRET_KEY }}" | gpg --import --no-tty --batch --yes
        env:
          GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from git tag (remove 'v' prefix if present)
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"

      - name: Verify project structure
        run: |
          echo "=== Project Structure ==="
          find . -name "pom.xml" -type f | head -10
          echo "=== Root POM ==="
          if [ -f "pom.xml" ]; then
            grep -A 5 -B 5 "revision\|ci-friendly" pom.xml || echo "No revision property found in root pom"
          fi

      - name: Set revision property
        run: |
          echo "Setting revision to ${{ steps.version.outputs.VERSION }}"
          mvn versions:set-property -Dproperty=revision -DnewVersion=${{ steps.version.outputs.VERSION }} -DgenerateBackupPoms=false

      - name: Validate Maven configuration
        run: |
          echo "=== Effective POM (first module) ==="
          mvn help:effective-pom -Doutput=effective-pom.xml -q
          if [ -f "effective-pom.xml" ]; then
            grep -A 3 -B 3 "<version>" effective-pom.xml | head -10
          fi

      - name: Run tests
        run: |
          mvn clean test -Drevision=${{ steps.version.outputs.VERSION }} -B

      - name: Deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Deploying to Maven Central with version ${{ steps.version.outputs.VERSION }}"
      
          echo "Deploying all modules with distributionManagement configured"
          mvn clean deploy -Drevision=${{ steps.version.outputs.VERSION }} \
            -DskipTests=true \
            -B \
            -Prelease-profile 

      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes in ${{ steps.version.outputs.VERSION }}
            
            This release has been automatically deployed to Maven Central.
            
            **Maven Coordinates:**
            ```xml
            <dependency>
                <groupId>com.gridatek</groupId>
                <artifactId>spring-modular-archetype</artifactId>
                <version>${{ steps.version.outputs.VERSION }}</version>
            </dependency>
            ```
          draft: false
          prerelease: false

  verify-deployment:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Wait for Maven Central sync
        run: |
          echo "Waiting 5 minutes for Maven Central synchronization..."
          sleep 300

      - name: Verify deployment
        run: |
          VERSION=${{ needs.deploy.outputs.version }}
          VERSION=${VERSION#v}
          
          echo "Verifying deployment of version $VERSION"
          GROUP_ID="com.gridatek"  
          ARTIFACT_ID="spring-modular-archetype"  
          
          # Check if artifact is available on Maven Central
          MAVEN_URL="https://repo1.maven.org/maven2/${GROUP_ID//./\/}/${ARTIFACT_ID}/${VERSION}/${ARTIFACT_ID}-${VERSION}.pom"
          
          echo "Checking: $MAVEN_URL"
          
          # Retry logic for Maven Central sync
          for i in {1..10}; do
            if curl -f -s "$MAVEN_URL" > /dev/null; then
              echo "✅ Artifact successfully deployed to Maven Central!"
              exit 0
            else
              echo "⏳ Attempt $i/10: Artifact not yet available, waiting..."
              sleep 60
            fi
          done
          
          echo "❌ Artifact not found on Maven Central after 10 minutes"
          exit 1